<?xml version="1.0" encoding="UTF-8"?>
<!--
`beans` schema는 디폴트 네임스페이스이므로 접두어 없이 사용할 수 있음.

aop 스키마에 정의된 태그를 사용하려면 설정파일에 aop 네임스페이스 선언을 추가해줘야한다.
`aop` schema는 aop 네임스페이스를 가지므로 aop 접두어를 사용한다.

context 스키마에 정의된 태그를 context 네임스페이스를 통해 사용하도록 정의한다.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

  <tx:annotation-driven/> <!-- @Transactional이 붙은 타입과 메소드에 트랜잭션 부가기능을 담은 프록시를 추가하도록 만들어주는 후처리기 등록 -->
  <context:annotation-config/> <!-- 코드의 애노테이션을 이용해서 부가적인 빈 설정 또는 초기화 작업을 해주는 후처리기를 등록 -->

  <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
    <!-- XML을 이용한 DB 연결정보 설정 -->
    <property name="driverClass" value="org.h2.Driver"/>
    <property name="url" value="jdbc:h2:~/testdb"/>
    <property name="username" value="sa"/>
    <property name="password" value=""/>
  </bean>

  <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <!-- XML을 이용한 DB 연결정보 설정 -->
    <property name="dataSource" ref="dataSource"/>
  </bean>


  <bean id="userDao" class="springbook.user.dao.UserDaoJdbc">
    <!--<property name="dataSource" ref="dataSource"/>-->
    <property name="jdbcTemplate" ref="jdbcTemplate"/>
    <property name="sqlService" ref="sqlService"/>
  </bean>

  <bean id="sqlService" class="springbook.user.sqlservice.OxmSqlService">
    <property name="unmarsaller" ref="unmarshaller"/>
    <property name="sqlmap" value="classpath:springbook/user/dao/sqlmap.xml"/> <!-- "classpath:" 는 디폴트이므로 생략가능. 클래스패스 위치를 지정할 때는 클래스패스 루트부터 절대위치를 적어야함. -->
    <!--<property name="sqlmapFile" value="file:/opt/resources/sqlmap.xml"/> &lt;!&ndash; 파일 시스템의 특정 위치에 있는 파일을 읽어오고 싶다면 다음과 같이 하면 됨. &ndash;&gt;-->
    <!--<property name="sqlmapHttp" value="http://www.epril.com/reousrces/sqlmap.xml"/> &lt;!&ndash; http 프로토콜로 접근 가능한 웹 리소스를 가져올 때 &ndash;&gt;-->
  </bean>

  <bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
    <property name="contextPath" value="springbook.user.sqlservice.jaxb"/>
  </bean>

  <bean id="sqlReader" class="springbook.user.sqlservice.JaxbXmlSqlReader">
    <property name="sqlmapFile" value="sqlmap.xml"/>
  </bean>

  <bean id="sqlRegistry" class="springbook.user.sqlservice.HashMapSqlRegistry">
  </bean>

  <!-- DefaultAdvisorAutoProxyCreator로 인해 더이상 명시적인 프록시 팩토리 빈이 필요하지 않음. -->
  <!--<bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">-->
  <!--<property name="target" ref="userServiceImpl"/>-->
  <!--<property name="interceptorNames"> &lt;!&ndash; advice와 advisor를 동시에 설정해줄 수 있는 프로퍼티. 리스트에 어드바이스나 어드바이저의 빈 아이디를 값으로 넣으주면 됨. 기존의 ref 애트리뷰터를 사용하는 DI와는 방식이 다름에 주의. &ndash;&gt;-->
  <!--<list>-->
  <!--<value>transactionAdvisor</value>-->
  <!--</list>-->
  <!--</property>-->
  <!--</bean>-->

  <bean id="userService" class="springbook.user.service.UserServiceImpl">
    <!-- DI 받도록 property 추가 -->
    <property name="userDao" ref="userDao"/>
    <property name="mailSender" ref="mailSender"/>
  </bean>

  <!-- 테스트용 UserService 등록; 스태틱 멤버 클래스는 $로 지정함. -->
  <bean id="testUserService" class="springbook.user.service.UserServiceTest$TestUserServiceImpl"
    parent="userService"/> <!-- 프로퍼티 정의를 포함해서 userService빈의 설정을 상속받음. -->

  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <!--class="org.springframework.transaction.jta.JtaTransactionManager">-->
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <bean id="mailSender" class="springbook.user.service.DummyMailSender"/>

  <!-- 이 태그에 의해 TransactionInterceptor 빈이 등록 -->
  <tx:advice id="transactionAdvice"> <!-- TODO: 이 transactionAdvice 라는 id가 tx namespace에 존재하는 것인가?-->
  </tx:advice>

  <!-- aop:config, aop:pointcut, aop:advisor 세 가지 태그를 정의해두면 그에 따라 세 개의 빈이 자동으로 등록됨. -->
  <aop:config> <!-- AOP 설정을 담는 부모 태그. 필요에 따라 AspectJAdvisorAutoProxyCreator를 빈으로 등록해줌. -->
    <!-- expression의 표현식을 프로퍼티로 가진 AspectJExpressionPointcut을 빈으로 등록해줌. -->
    <aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)"/> <!-- id가 Service로 끝나는 모든 빈에 transactionAdvice 빈의 부가기능이 적용됨. -->
  </aop:config>

  <!-- 다른 빈에서 참조되거나 코드에서 빈 이름으로 조회될 필요가 없는 빈이라면 아이디를 등록하지 않아도 무방. -->
  <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

  <!-- UserService 외에 트랜잭션 경계설정 기능을 부여해줄 필요가 있는 클래스도 아래와 같이 추가 가능 -->

  <bean id="coreDao" class="complex.module.CoreDaoJdbc">
  </bean>

  <bean id="coreServiceTarget" class="complex.module.CoreServiceImpl">
    <property name="coreDao" ref="coreDao"/>
  </bean>

  <bean id="coreService" class="springbook.user.service.TxProxyFactoryBean">
    <property name="target" ref="coreServiceTarget"/>
    <property name="transactionManager" ref="transactionManager"/>
    <property name="pattern" value=""/>
    <property name="serviceInterface" value="complex.module.CoreService"/>
  </bean>

</beans>